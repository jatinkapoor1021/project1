// Author: Jatin Kapoor
// Course: CSCI-135
// Instructor: Professor Maryash
// Assignment: Project 1- Task D

#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <climits>
#include <stdlib.h>






using namespace std;

const int g_MAX_WORDS = 1000;
int g_word_count = 0;

std::string g_words[g_MAX_WORDS];
std::string g_definitions[g_MAX_WORDS];
std::string g_pos[g_MAX_WORDS];

/*
  @param            :   The string with the `filename`
  @post             :   Reads the words, definitions
                        pos into the global-arrays
                        and set the value of `g_word_count`
                        to the number of words read
*/

void readWords(string filename) {
  
  ifstream fin(filename);
  if (!fin) {
    cerr << "Error: Could not open file for reading." << endl;
    exit(1);
  }

  string word; 
  string pos;
  string definition;
  string line;
  string junk;
  while (fin >> word >> pos >> junk ) {
    getline(fin, line);
    definition = line.substr(1);
    g_words[g_word_count] = word;
    g_pos[g_word_count] = pos;
    g_definitions[g_word_count] = definition;
    g_word_count++;
  }

  fin.close();
}


/*
    @param            :   The string with a query word
    @return           :   Integer index of the word in
                          `g_words` global-array. Returns
                          -1 if the word is not found
    @post             :   Find the index of given `word`
                          in the `g_words` array. Return -1
                          if word is not in the array
*/
int getIndex(string word) {
    for (int i = 0; i < g_word_count; i++) {
        if (g_words[i] == word) {
            return i;
        }
    }
    return -1;
}

/*
    @param            :   The string with a query word
    @return           :   Return the string definition of
                          the word from  `g_definitions`
                          global-array. Return "NOT_FOUND" if
                          word doesn't exist in the dictionary
    @post             :   Find the definition of the given `word`
                          Return "NOT_FOUND" otherwise
*/
string getDefinition(string word) {
    int index = getIndex(word);
    if (index != -1) {
        return g_definitions[index];
    }
    else {
        return "NOT_FOUND";
    }
}

/*
    @param            :   The string with a query word
    @return           :   Return the string part-of-speech(pos) 
                          from the `g_pos` global-array. Return
                          "NOT_FOUND" if the word doesn't exist
                          in the dictionary.
    @post             :   Find the pos of the given `word`
                          Return "NOT_FOUND" otherwise
*/
string getPOS(string word) {
    int index = getIndex(word);
    if (index != -1) {
        return g_pos[index];
    }
    else {
        return "NOT_FOUND";
    }
}

/*
    @param            :   The string prefix of a word (the prefix
                          can be of any length)
    @return           :   Integer number of words found that starts
                          with the given `prefix`
    @post             :   Count the words that start with the given
                          `prefix`
*/
int countPrefix(string prefix) {
    int count = 0;
    for (int i = 0; i < g_word_count; i++) {
        if (g_words[i].find(prefix) == 0) {
            count++;
        }
    }
    return count;
}

/*
    @param word       :   The string with a new word
    @param definition :   The string with the definition of the
                          new `word`
    @param pos        :   The string with the pos of the new `word`
    @return           :   return `true` if the word is
                          successfully added to the dictionary
                          return `false` if failed (word already
                          exists or dictionary is full)
    @post             :   Add the given `word`, `definition`, `pos`
                          to the end of the respective
                          global-arrays.
                          The word should not be added to the
                          global-arrays if it already exists 
                          or if the array reached maximum 
                          capacity(`g_MAX_WORDS`).
                          Update `g_word_count` if the word is
                          successfully added
*/
bool addWord(string word, string definition, string pos) {
    
    for (int i = 0; i < g_word_count; i++) {
        if (g_words[i] == word) {
            return false;
        }
    }
    
    
    if (g_word_count == g_MAX_WORDS) {
        return false;
    }
    
    
    g_words[g_word_count] = word;
    g_definitions[g_word_count] = definition;
    g_pos[g_word_count] = pos;
    
    
    g_word_count++;
    
    return true;
}

/*
    @param word       :   The string with the word that is to
                          be edited
    @param definition :   The string with the new definition of 
                          the `word`
    @param pos        :   The string with the new pos of the `word`
    @return           :   return `true` if the word is successfully
                          edited, return `false` if the `word`
                          doesn't exist in the dictionary
    @post             :   Replace the given `word`'s  definition
                          and pos with the given `definition` and
                          `pos` (by modifying global-arrays
                          `g_definitions` and `g_pos`).
                          The modification will fail if the word
                          doesn't exist in the dictionary
*/
bool editWord(string word, string definition, string pos) {
    
    int index = -1;
    for (int i = 0; i < g_word_count; i++) {
        if (g_words[i] == word) {
            index = i;
            break;
        }
    }
    
    
    if (index == -1) {
        return false;
    }
    
    
    g_definitions[index] = definition;
    g_pos[index] = pos;
    
    return true;
}

/*
    @param word       :   The string with the word to be removed
    @return           :   Return true if the word is successfully
                          removed from the dictionary, false otherwise
    @post             :   Remove the given `word`, along with its 
                          corresponding `definition` and `pos` from
                          the respective global-arrays. Shift the 
                          elements of the arrays to fill the gap. 
                          Update `g_word_count` if the word is 
                          successfully removed
*/
bool removeWord(string word) {
    int index = getIndex(word);
    if (index == -1) {
        return false;
    }
    else {
        
        for (int i = index; i < g_word_count - 1; i++) {
            g_words[i] = g_words[i+1];
            g_definitions[i] = g_definitions[i+1];
            g_pos[i] = g_pos[i+1];
        }
        
        g_words[g_word_count-1] = "";
        g_definitions[g_word_count-1] = "";
        g_pos[g_word_count-1] = "";
        
        g_word_count--;
        return true;
    }

// TASK D

std::string maskWord(std::string word){
    std::string mask;
    int length = word.length();
    for(int m = 0; m < length; m++){
        mask = mask + "_";
    }
    return mask;
}

int getTries(int difficulty){
    if(difficulty == 0){
        return 9;
    }
    if(difficulty == 1){
        return 7;
    }
    if(difficulty == 2){
        return 5;
    }
}

void printAttempts(int tries, int difficulty){
    int dif = getTries(difficulty);
    for(int n = 0; n < tries; n++){
        std::cout<<"O";
    }
    if(tries != dif){
        for(int o = tries; o < dif; o++){
            std::cout<<"X";
        }
    }   
}


bool revealLetter(std::string word, char letter, std::string& current){
    int counter1 = 0;
    for(int p = 0; p < word.length(); p++){
        if(word[p] == letter){
            counter1 += 1;
        }
    }
    if(counter1 < word.length()){
        for(int q = 0; q < word.length(); q++){
            if(word[q] == letter){
                current[q] = word[q];
            }
        }
        return true;
    }
    else{
        return false;
    }


}







